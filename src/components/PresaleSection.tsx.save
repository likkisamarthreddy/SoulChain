import React, { useState, useEffect } from 'react';

// Contract addresses
const SOUL_TOKEN_ADDRESS = '0x0da2f99B7f10988f31DaCf9b9874f526A8197e7d';
const SOUL_PRESALE_ADDRESS = '0xdf7bA20193E031Aab8076efeF320c0492A4B0935';
const SOUL_STAKING_ADDRESS = '0x1234567890123456789012345678901234567890'; // Replace with actual staking contract
const USDT_ADDRESS = '0x55d398326f99059fF775485246999027B3197955'; // BSC USDT

// ABIs for smart contracts
const soulTokenAbi = [
  'function approve(address spender, uint256 amount) external returns (bool)',
  'function allowance(address owner, address spender) external view returns (uint256)',
  'function balanceOf(address account) external view returns (uint256)',
  'function decimals() external view returns (uint8)',
  'function symbol() external view returns (string)',
  'function name() external view returns (string)',
];

const soulPresaleAbi = [
  'function buyWithBNB() external payable',
  'function buyWithBNB(address referrer) external payable',
  'function buyWithUSDT(uint256 usdtAmount) external',
  'function buyWithUSDT(uint256 usdtAmount, address referrer) external',
  'function claimTokens() external',
  'function tokensPurchased(address buyer) external view returns (uint256)',
  'function tokensPerBNB() external view returns (uint256)',
  'function tokensPerUSDT() external view returns (uint256)',
  'function presaleActive() external view returns (bool)',
  'function claimingActive() external view returns (bool)',
  'function referralRewards(address referrer) external view returns (uint256)',
  'function referralCount(address referrer) external view returns (uint256)',
  'function claimReferralRewards() external',
  'function getReferralCode(address user) external view returns (string)',
  'function generateReferralCode() external',
];

const soulStakingAbi = [
  'function stake(uint256 amount) external',
  'function unstake(uint256 amount) external',
  'function claimRewards() external',
  'function stakedBalance(address user) external view returns (uint256)',
  'function pendingRewards(address user) external view returns (uint256)',
  'function stakingActive() external view returns (bool)',
  'function apy() external view returns (uint256)',
  'function totalStaked() external view returns (uint256)',
];

const usdtAbi = [
  'function approve(address spender, uint256 amount) external returns (bool)',
  'function allowance(address owner, address spender) external view returns (uint256)',
  'function balanceOf(address account) external view returns (uint256)',
  'function decimals() external view returns (uint8)',
];

// Bridge contract ABI - Add this after your existing ABIs
const bridgeAbi = [
  'function deposit(address token, uint256 amount, uint256 targetChainId) external payable',
  'function depositNative(uint256 targetChainId) external payable',
  'function withdraw(bytes32 txHash, address token, uint256 amount, address recipient) external',
  'function getBridgeFee(uint256 targetChainId) external view returns (uint256)',
  'function getSupportedTokens() external view returns (address[])',
  'function isChainSupported(uint256 chainId) external view returns (bool)'
];

// Payment processor ABI
const paymentProcessorAbi = [
  'function processPayment(address token, uint256 amount, bytes32 orderId) external',
  'function processNativePayment(bytes32 orderId) external payable',
  'function getExchangeRate(address fromToken, address toToken) external view returns (uint256)',
  'function getSupportedTokens(uint256 chainId) external view returns (address[])'
];

// Bridge contract addresses (you'll need to deploy these)
const BRIDGE_CONTRACTS = {
  bsc: '0x1234567890123456789012345678901234567890', // Replace with actual BSC bridge
  ethereum: '0x1234567890123456789012345678901234567891', // Replace with actual ETH bridge
  polygon: '0x1234567890123456789012345678901234567892', // Replace with actual Polygon bridge
  arbitrum: '0x1234567890123456789012345678901234567893' // Replace with actual Arbitrum bridge
};

// BSC Network configuration
const BSC_NETWORK = {
  chainId: '0x38', // 56 in hex
  chainName: 'Binance Smart Chain',
  nativeCurrency: {
    name: 'BNB',
    symbol: 'BNB',
    decimals: 18,
  },
  rpcUrls: ['https://bsc-dataseed.binance.org/'],
  blockExplorerUrls: ['https://bscscan.com/'],
};

const SUPPORTED_NETWORKS = {
  bsc: {
    chainId: '0x38', // 56
    chainName: 'Binance Smart Chain',
    nativeCurrency: { name: 'BNB', symbol: 'BNB', decimals: 18 },
    rpcUrls: ['https://bsc-dataseed.binance.org/'],
    blockExplorerUrls: ['https://bscscan.com/'],
    tokens: {
      USDT: '0x55d398326f99059fF775485246999027B3197955',
      USDC: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',
      BUSD: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56'
    }
  },
  ethereum: {
    chainId: '0x1', // 1
    chainName: 'Ethereum Mainnet',
    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },
    rpcUrls: ['https://mainnet.infura.io/v3/YOUR_INFURA_KEY'],
    blockExplorerUrls: ['https://etherscan.io/'],
    tokens: {
      USDT: '0xdAC17F958D2ee523a2206206994597C13D831ec7',
      USDC: '0xA0b86a33E6441b8dB9d7c38AaC77f3a2b0C8F4A3',
      DAI: '0x6B175474E89094C44Da98b954EedeAC495271d0F'
    }
  },
  polygon: {
    chainId: '0x89', // 137
    chainName: 'Polygon Mainnet',
    nativeCurrency: { name: 'MATIC', symbol: 'MATIC', decimals: 18 },
    rpcUrls: ['https://polygon-rpc.com/'],
    blockExplorerUrls: ['https://polygonscan.com/'],
    tokens: {
      USDT: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',
      USDC: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',
      DAI: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063'
    }
  },
  arbitrum: {
    chainId: '0xA4B1', // 42161
    chainName: 'Arbitrum One',
    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },
    rpcUrls: ['https://arb1.arbitrum.io/rpc'],
    blockExplorerUrls: ['https://arbiscan.io/'],
    tokens: {
      USDT: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',
      USDC: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',
      DAI: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1'
    }
  }
};

function App() {
  // State variables
  const [account, setAccount] = useState('');
  const [provider, setProvider] = useState(null);
  const [signer, setSigner] = useState(null);
  const [loading, setLoading] = useState(false);
  const [connected, setConnected] = useState(false);
  const [walletType, setWalletType] = useState('');
  const [activeTab, setActiveTab] = useState('presale');
const [currentNetwork, setCurrentNetwork] = useState('bsc');
const [supportedTokens, setSupportedTokens] = useState([]);
const [selectedToken, setSelectedToken] = useState('native');
const [tokenAmount, setTokenAmount] = useState('');
const [targetNetwork, setTargetNetwork] = useState('bsc');
const [bridgeFee, setBridgeFee] = useState('0');
const [tokenBalances, setTokenBalances] = useState({});
const [exchangeRates, setExchangeRates] = useState({});

  // Balances
  const [bnbBalance, setBnbBalance] = useState('0');
  const [soulBalance, setSoulBalance] = useState('0');
  const [usdtBalance, setUsdtBalance] = useState('0');

  // Input amounts
  const [bnbAmount, setBnbAmount] = useState('');
  const [usdtAmount, setUsdtAmount] = useState('');
  const [stakeAmount, setStakeAmount] = useState('');
  const [unstakeAmount, setUnstakeAmount] = useState('');

  // Contract info
  const [tokensPerBNB, setTokensPerBNB] = useState('0');
  const [tokensPerUSDT, setTokensPerUSDT] = useState('0');
  const [presaleActive, setPresaleActive] = useState(false);
  const [claimingActive, setClaimingActive] = useState(false);
  const [tokensPurchased, setTokensPurchased] = useState('0');

  // Referral system
  const [referralCode, setReferralCode] = useState('');
  const [userReferralCode, setUserReferralCode] = useState('');
  const [referralRewards, setReferralRewards] = useState('0');
  const [referralCount, setReferralCount] = useState('0');
  const [referralLink, setReferralLink] = useState('');

  // Staking system
  const [stakingActive, setStakingActive] = useState(false);
  const [stakedBalance, setStakedBalance] = useState('0');
  const [pendingRewards, setPendingRewards] = useState('0');
  const [stakingAPY, setStakingAPY] = useState('0');
  const [totalStaked, setTotalStaked] = useState('0');
  const [soulAllowanceStaking, setSoulAllowanceStaking] = useState('0');

  // Allowances
  const [usdtAllowance, setUsdtAllowance] = useState('0');

  // Messages
  const [messages, setMessages] = useState([]);

  // Add message function
  const addMessage = (title, description, type = 'info') => {
    const message = {
      id: Date.now() + Math.random(),
      title,
      description,
      type,
      timestamp: new Date().toLocaleTimeString(),
    };
    setMessages((prev) => [message, ...prev.slice(0, 4)]); // Keep last 5 messages

    // Auto remove after 5 seconds
    setTimeout(() => {
      setMessages((prev) => prev.filter((m) => m.id !== message.id));
    }, 5000);
  };

  // Check if wallet is already connected
  useEffect(() => {
    checkConnection();
    checkReferralFromURL();

    // Listen for account changes
    if (typeof window !== 'undefined' && window.ethereum) {
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);
    }

    return () => {
      if (typeof window !== 'undefined' && window.ethereum) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, []);

  const checkReferralFromURL = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const refCode = urlParams.get('ref');
    if (refCode) {
      setReferralCode(refCode);
      addMessage('Referral Code Applied', `Using referral code: ${refCode}`, 'success');
    }
  };

  const handleAccountsChanged = (accounts) => {
    if (accounts.length === 0) {
      disconnectWallet();
    } else if (accounts[0] !== account) {
      setAccount(accounts[0]);
      if (provider && signer) {
        loadContractData(provider, signer, accounts[0]);
      }
    }
  };

  const handleChainChanged = () => {
    window.location.reload();
  };

  const checkConnection = async () => {
    if (typeof window !== 'undefined' && window.ethereum) {
      try {
        const accounts = await window.ethereum.request({
          method: 'eth_accounts',
        });
        if (accounts.length > 0) {
          await connectWallet('metamask');
        }
      } catch (error) {
        console.log('Not connected to wallet');
      }
    }
  };

  // Check and switch to BSC network
  const switchToBSC = async () => {
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: BSC_NETWORK.chainId }],
      });
    } catch (switchError) {
      if (switchError.code === 4902) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [BSC_NETWORK],
          });
        } catch (addError) {
          throw new Error('Failed to add BSC network');
        }
      } else {
        throw switchError;
      }
    }
  };

  // Connect to wallet
  const connectWallet = async (type) => {
    if (typeof window === 'undefined') {
      addMessage('Browser Required', 'Please use a web3 enabled browser', 'error');
      return;
    }

    let ethereum;

    if (type === 'metamask') {
      if (!window.ethereum) {
        addMessage('MetaMask Required', 'Please install MetaMask browser extension', 'error');
        return;
      }
      ethereum = window.ethereum;
    } else if (type === 'trustwallet') {
      if (!window.trustwallet) {
        addMessage('Trust Wallet Required', 'Please install Trust Wallet browser extension', 'error');
        return;
      }
      ethereum = window.trustwallet;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      await ethereum.request({ method: 'eth_requestAccounts' });

      const chainId = await ethereum.request({ method: 'eth_chainId' });
      if (chainId !== BSC_NETWORK.chainId) {
        await switchToBSC();
      }

      const web3Provider = new ethers.BrowserProvider(ethereum);
      const web3Signer = await web3Provider.getSigner();
      const address = await web3Signer.getAddress();

      setProvider(web3Provider);
      setSigner(web3Signer);
      setAccount(address);
      setConnected(true);
      setWalletType(type);

      addMessage('Wallet Connected', `Connected to ${address.slice(0, 6)}...${address.slice(-4)}`, 'success');

      await loadContractData(web3Provider, web3Signer, address);
    } catch (error) {
      console.error('Connection error:', error);
      addMessage('Connection Failed', error.message || 'Failed to connect wallet', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Disconnect wallet
  const disconnectWallet = () => {
    setProvider(null);
    setSigner(null);
    setAccount('');
    setConnected(false);
    setWalletType('');
    setBnbBalance('0');
    setSoulBalance('0');
    setUsdtBalance('0');
    setTokensPurchased('0');
    setUsdtAllowance('0');
    setReferralRewards('0');
    setReferralCount('0');
    setStakedBalance('0');
    setPendingRewards('0');
    setSoulAllowanceStaking('0');
    addMessage('Wallet Disconnected', 'Successfully disconnected from wallet', 'info');
  };

  // Load contract data
  const loadContractData = async (web3Provider, web3Signer, address) => {
    try {
      const { ethers } = await import('ethers');

      // Create contract instances
      const soulToken = new ethers.Contract(SOUL_TOKEN_ADDRESS, soulTokenAbi, web3Provider);
      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, web3Provider);
      const soulStaking = new ethers.Contract(SOUL_STAKING_ADDRESS, soulStakingAbi, web3Provider);
      const usdtToken = new ethers.Contract(USDT_ADDRESS, usdtAbi, web3Provider);

      // Load basic balances and presale data
      try {
        const [bnbBal, soulBal, usdtBal] = await Promise.all([
          web3Provider.getBalance(address),
          soulToken.balanceOf(address).catch(() => ethers.parseEther('0')),
          usdtToken.balanceOf(address).catch(() => ethers.parseEther('0')),
        ]);

        setBnbBalance(ethers.formatEther(bnbBal));
        setSoulBalance(ethers.formatUnits(soulBal, 18));
        setUsdtBalance(ethers.formatUnits(usdtBal, 18));
      } catch (error) {
        console.error('Error loading balances:', error);
      }

      // Load presale data
      try {
        const [tPerBNB, tPerUSDT, pActive, cActive, tPurchased, uAllowance] = await Promise.all([
          soulPresale.tokensPerBNB().catch(() => ethers.parseEther('1000')),
          soulPresale.tokensPerUSDT().catch(() => ethers.parseEther('1')),
          soulPresale.presaleActive().catch(() => true),
          soulPresale.claimingActive().catch(() => false),
          soulPresale.tokensPurchased(address).catch(() => ethers.parseEther('0')),
          usdtToken.allowance(address, SOUL_PRESALE_ADDRESS).catch(() => ethers.parseEther('0')),
        ]);

        setTokensPerBNB(ethers.formatUnits(tPerBNB, 18));
        setTokensPerUSDT(ethers.formatUnits(tPerUSDT, 18));
        setPresaleActive(pActive);
        setClaimingActive(cActive);
        setTokensPurchased(ethers.formatUnits(tPurchased, 18));
        setUsdtAllowance(ethers.formatUnits(uAllowance, 18));
      } catch (error) {
        console.error('Error loading presale data:', error);
      }

      // Load referral data
      try {
        const [refRewards, refCount, userRefCode] = await Promise.all([
          soulPresale.referralRewards(address).catch(() => ethers.parseEther('0')),
          soulPresale.referralCount(address).catch(() => 0),
          soulPresale.getReferralCode(address).catch(() => ''),
        ]);

        setReferralRewards(ethers.formatUnits(refRewards, 18));
        setReferralCount(refCount.toString());
        setUserReferralCode(userRefCode);

        if (userRefCode) {
          setReferralLink(`${window.location.origin}?ref=${userRefCode}`);
        }
      } catch (error) {
        console.error('Error loading referral data:', error);
      }

      // Load staking data
      try {
        const [sActive, stakedBal, pendingRew, apy, totalStak, soulAllowStaking] = await Promise.all([
          soulStaking.stakingActive().catch(() => false),
          soulStaking.stakedBalance(address).catch(() => ethers.parseEther('0')),
          soulStaking.pendingRewards(address).catch(() => ethers.parseEther('0')),
          soulStaking.apy().catch(() => 120), // 120% APY default
          soulStaking.totalStaked().catch(() => ethers.parseEther('0')),
          soulToken.allowance(address, SOUL_STAKING_ADDRESS).catch(() => ethers.parseEther('0')),
        ]);

        setStakingActive(sActive);
        setStakedBalance(ethers.formatUnits(stakedBal, 18));
        setPendingRewards(ethers.formatUnits(pendingRew, 18));
        setStakingAPY(apy.toString());
        setTotalStaked(ethers.formatUnits(totalStak, 18));
        setSoulAllowanceStaking(ethers.formatUnits(soulAllowStaking, 18));
      } catch (error) {
        console.error('Error loading staking data:', error);
      }

    } catch (error) {
      console.error('Error loading contract data:', error);
      addMessage('Data Load Error', 'Some contract data may not be available', 'warning');
    }
  };

  // Generate referral code
  const generateReferralCode = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, signer);
      const tx = await soulPresale.generateReferralCode({ gasLimit: 100000 });

      addMessage('Transaction Sent', 'Generating referral code...', 'info');
      await tx.wait();

      addMessage('Success', 'Referral code generated successfully!', 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('Generate referral code error:', error);
      addMessage('Generation Failed', error.reason || error.message || 'Failed to generate referral code', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Buy tokens with BNB
  const buyWithBNB = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (!bnbAmount || parseFloat(bnbAmount) <= 0) {
      addMessage('Invalid Amount', 'Please enter a valid BNB amount', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, signer);

      let tx;
      if (referralCode && ethers.isAddress(referralCode)) {
        tx = await soulPresale['buyWithBNB(address)'](referralCode, {
          value: ethers.parseEther(bnbAmount),
          gasLimit: 300000,
        });
      } else {
        tx = await soulPresale['buyWithBNB()']({
          value: ethers.parseEther(bnbAmount),
          gasLimit: 300000,
        });
      }

      addMessage('Transaction Sent', `Buying tokens with ${bnbAmount} BNB`, 'info');
      await tx.wait();

      addMessage('Purchase Success', `Successfully bought tokens with ${bnbAmount} BNB!`, 'success');
      await loadContractData(provider, signer, account);
      setBnbAmount('');
    } catch (error) {
      console.error('BNB purchase error:', error);
      addMessage('Purchase Failed', error.reason || error.message || 'BNB purchase failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Approve USDT spending
  const approveUSDT = async () => {
    if (!connected || !signer || !usdtAmount) {
      addMessage('Invalid Request', 'Please connect wallet and enter USDT amount', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const usdtToken = new ethers.Contract(USDT_ADDRESS, usdtAbi, signer);
      const amount = ethers.parseUnits(usdtAmount, 18);

      const tx = await usdtToken.approve(SOUL_PRESALE_ADDRESS, amount, { gasLimit: 100000 });

      addMessage('Approval Sent', 'Approving USDT spending...', 'info');
      await tx.wait();

      addMessage('Approval Success', `Approved ${usdtAmount} USDT for spending`, 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('USDT approval error:', error);
      addMessage('Approval Failed', error.reason || error.message || 'USDT approval failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Buy tokens with USDT
  const buyWithUSDT = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (!usdtAmount || parseFloat(usdtAmount) <= 0) {
      addMessage('Invalid Amount', 'Please enter a valid USDT amount', 'warning');
      return;
    }

    if (parseFloat(usdtAllowance) < parseFloat(usdtAmount)) {
      addMessage('Insufficient Allowance', 'Please approve USDT spending first', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, signer);
      const amount = ethers.parseUnits(usdtAmount, 18);

      let tx;
      if (referralCode && ethers.isAddress(referralCode)) {
        tx = await soulPresale['buyWithUSDT(uint256,address)'](amount, referralCode, { gasLimit: 300000 });
      } else {
        tx = await soulPresale['buyWithUSDT(uint256)'](amount, { gasLimit: 300000 });
      }

      addMessage('Transaction Sent', `Buying tokens with ${usdtAmount} USDT`, 'info');
      await tx.wait();

      addMessage('Purchase Success', `Successfully bought tokens with ${usdtAmount} USDT!`, 'success');
      await loadContractData(provider, signer, account);
      setUsdtAmount('');
    } catch (error) {
      console.error('USDT purchase error:', error);
      addMessage('Purchase Failed', error.reason || error.message || 'USDT purchase failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Claim purchased tokens
  const claimTokens = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (parseFloat(tokensPurchased) <= 0) {
      addMessage('No Tokens', 'You have no tokens available to claim', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, signer);
      const tx = await soulPresale.claimTokens({ gasLimit: 200000 });

      addMessage('Transaction Sent', 'Claiming your tokens...', 'info');
      await tx.wait();

      addMessage('Claim Success', 'Successfully claimed your tokens!', 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('Claim error:', error);
      addMessage('Claim Failed', error.reason || error.message || 'Token claim failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Claim referral rewards
  const claimReferralRewards = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (parseFloat(referralRewards) <= 0) {
      addMessage('No Rewards', 'You have no referral rewards to claim', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulPresale = new ethers.Contract(SOUL_PRESALE_ADDRESS, soulPresaleAbi, signer);
      const tx = await soulPresale.claimReferralRewards({ gasLimit: 200000 });

      addMessage('Transaction Sent', 'Claiming referral rewards...', 'info');
      await tx.wait();

      addMessage('Claim Success', 'Successfully claimed referral rewards!', 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('Referral claim error:', error);
      addMessage('Claim Failed', error.reason || error.message || 'Referral claim failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Approve SOUL for staking
  const approveSoulStaking = async () => {
    if (!connected || !signer || !stakeAmount) {
      addMessage('Invalid Request', 'Please connect wallet and enter stake amount', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulToken = new ethers.Contract(SOUL_TOKEN_ADDRESS, soulTokenAbi, signer);
      const amount = ethers.parseUnits(stakeAmount, 18);

      const tx = await soulToken.approve(SOUL_STAKING_ADDRESS, amount, { gasLimit: 100000 });

      addMessage('Approval Sent', 'Approving SOUL for staking...', 'info');
      await tx.wait();

      addMessage('Approval Success', `Approved ${stakeAmount} SOUL for staking`, 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('SOUL approval error:', error);
      addMessage('Approval Failed', error.reason || error.message || 'SOUL approval failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Stake tokens
  const stakeTokens = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (!stakeAmount || parseFloat(stakeAmount) <= 0) {
      addMessage('Invalid Amount', 'Please enter a valid stake amount', 'warning');
      return;
    }

    if (parseFloat(soulAllowanceStaking) < parseFloat(stakeAmount)) {
      addMessage('Insufficient Allowance', 'Please approve SOUL for staking first', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulStaking = new ethers.Contract(SOUL_STAKING_ADDRESS, soulStakingAbi, signer);
      const amount = ethers.parseUnits(stakeAmount, 18);

      const tx = await soulStaking.stake(amount, { gasLimit: 250000 });

      addMessage('Transaction Sent', `Staking ${stakeAmount} SOUL tokens...`, 'info');
      await tx.wait();

      addMessage('Stake Success', `Successfully staked ${stakeAmount} SOUL tokens!`, 'success');
      await loadContractData(provider, signer, account);
      setStakeAmount('');
    } catch (error) {
      console.error('Stake error:', error);
      addMessage('Stake Failed', error.reason || error.message || 'Staking failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Unstake tokens
  const unstakeTokens = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (!unstakeAmount || parseFloat(unstakeAmount) <= 0) {
      addMessage('Invalid Amount', 'Please enter a valid unstake amount', 'warning');
      return;
    }

    if (parseFloat(unstakeAmount) > parseFloat(stakedBalance)) {
      addMessage('Insufficient Balance', 'You cannot unstake more than your staked balance', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulStaking = new ethers.Contract(SOUL_STAKING_ADDRESS, soulStakingAbi, signer);
      const amount = ethers.parseUnits(unstakeAmount, 18);

      const tx = await soulStaking.unstake(amount, { gasLimit: 250000 });

      addMessage('Transaction Sent', `Unstaking ${unstakeAmount} SOUL tokens...`, 'info');
      await tx.wait();

      addMessage('Unstake Success', `Successfully unstaked ${unstakeAmount} SOUL tokens!`, 'success');
      await loadContractData(provider, signer, account);
      setUnstakeAmount('');
    } catch (error) {
      console.error('Unstake error:', error);
      addMessage('Unstake Failed', error.reason || error.message || 'Unstaking failed', 'error');
    } finally {
      setLoading(false);
    }
  };



// [Previous code would be here - continuing from claimStakingRewards function]

  // Claim staking rewards
  const claimStakingRewards = async () => {
    if (!connected || !signer) {
      addMessage('Wallet Required', 'Please connect your wallet first', 'warning');
      return;
    }

    if (parseFloat(pendingRewards) <= 0) {
      addMessage('No Rewards', 'You have no staking rewards to claim', 'warning');
      return;
    }

    try {
      setLoading(true);
      const { ethers } = await import('ethers');

      const soulStaking = new ethers.Contract(SOUL_STAKING_ADDRESS, soulStakingAbi, signer);
      const tx = await soulStaking.claimRewards({ gasLimit: 200000 });

      addMessage('Transaction Sent', 'Claiming staking rewards...', 'info');
      await tx.wait();

      addMessage('Claim Success', 'Successfully claimed staking rewards!', 'success');
      await loadContractData(provider, signer, account);
    } catch (error) {
      console.error('Staking claim error:', error);
      addMessage('Claim Failed', error.reason || error.message || 'Staking claim failed', 'error');
    } finally {
      setLoading(false);
    }
  };

  // Copy referral link to clipboard
  const copyReferralLink = () => {
    if (referralLink) {
      navigator.clipboard.writeText(referralLink);
      addMessage('Copied', 'Referral link copied to clipboard!', 'success');
    }
  };

  // Format number for display
  const formatNumber = (num) => {
    return parseFloat(num).toFixed(4);
  };

  // Refresh data
  const refreshData = async () => {
    if (connected && provider && signer && account) {
      setLoading(true);
      await loadContractData(provider, signer, account);
      addMessage('Data Refreshed', 'Contract data updated successfully', 'success');
      setLoading(false);
    }
  };

  return (
   <div id="presale">
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
      {/* Header */}
      <div className="bg-black/20 backdrop-blur-sm border-b border-purple-500/20">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center">
                <span className="text-white font-bold text-lg">S</span>
              </div>
              <h1 className="text-2xl font-bold text-white">SOUL DApp</h1>
            </div>

            <div className="flex items-center space-x-4">
              {connected && (
                <button
                  onClick={refreshData}
                  disabled={loading}
                  className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors disabled:opacity-50"
                >
                  🔄 Refresh
                </button>
              )}

              {connected ? (
                <div className="flex items-center space-x-4">
                  <div className="text-right">
                    <div className="text-sm text-gray-300">Connected</div>
                    <div className="text-white font-medium">
                      {account.slice(0, 6)}...{account.slice(-4)}
                    </div>
                  </div>
                  <button
                    onClick={disconnectWallet}
                    className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
                  >
                    Disconnect
                  </button>
                </div>
              ) : (
                <div className="flex space-x-2">
                  <button
                    onClick={() => connectWallet('metamask')}
                    disabled={loading}
                    className="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors disabled:opacity-50"
                  >
                    MetaMask
                  </button>
                  <button
                    onClick={() => connectWallet('trustwallet')}
                    disabled={loading}
                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors disabled:opacity-50"
                  >
                    Trust Wallet
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Messages */}
      {messages.length > 0 && (
        <div className="max-w-7xl mx-auto px-4 pt-4">
          <div className="space-y-2">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`p-3 rounded-lg border-l-4 ${
                  message.type === 'success'
                    ? 'bg-green-900/50 border-green-500 text-green-100'
                    : message.type === 'error'
                    ? 'bg-red-900/50 border-red-500 text-red-100'
                    : message.type === 'warning'
                    ? 'bg-yellow-900/50 border-yellow-500 text-yellow-100'
                    : 'bg-blue-900/50 border-blue-500 text-blue-100'
                }`}
              >
                <div className="flex justify-between items-start">
                  <div>
                    <div className="font-semibold">{message.title}</div>
                    <div className="text-sm opacity-90">{message.description}</div>
                  </div>
                  <span className="text-xs opacity-70">{message.timestamp}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        {connected && (
          <>
            {/* Balance Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
                <div className="text-yellow-400 text-sm font-medium mb-2">BNB Balance</div>
                <div className="text-white text-2xl font-bold">{formatNumber(bnbBalance)}</div>
              </div>
              <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
                <div className="text-blue-400 text-sm font-medium mb-2">SOUL Balance</div>
                <div className="text-white text-2xl font-bold">{formatNumber(soulBalance)}</div>
              </div>
              <div className="bg-black/20 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
                <div className="text-green-400 text-sm font-medium mb-2">USDT Balance</div>
                <div className="text-white text-2xl font-bold">{formatNumber(usdtBalance)}</div>
              </div>
            </div>

            {/* Tab Navigation */}
            <div className="bg-black/20 backdrop-blur-sm rounded-xl border border-purple-500/20 mb-8">
              <div className="flex border-b border-purple-500/20">
                <button
                  onClick={() => setActiveTab('presale')}
                  className={`px-6 py-4 font-medium transition-colors ${
                    activeTab === 'presale'
                      ? 'text-purple-400 border-b-2 border-purple-400'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Token Presale
                </button>
                <button
                  onClick={() => setActiveTab('staking')}
                  className={`px-6 py-4 font-medium transition-colors ${
                    activeTab === 'staking'
                      ? 'text-purple-400 border-b-2 border-purple-400'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Staking
                </button>
                <button
                  onClick={() => setActiveTab('referral')}
                  className={`px-6 py-4 font-medium transition-colors ${
                    activeTab === 'referral'
                      ? 'text-purple-400 border-b-2 border-purple-400'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Referral System
                </button>
              </div>

              <div className="p-6">
                {/* Presale Tab */}
                {activeTab === 'presale' && (
                  <div className="space-y-6">
                    {/* Presale Info */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="bg-purple-900/30 rounded-lg p-4">
                        <div className="text-purple-400 text-sm mb-2">Tokens per BNB</div>
                        <div className="text-white text-xl font-bold">{formatNumber(tokensPerBNB)}</div>
                      </div>
                      <div className="bg-purple-900/30 rounded-lg p-4">
                        <div className="text-purple-400 text-sm mb-2">Tokens per USDT</div>
                        <div className="text-white text-xl font-bold">{formatNumber(tokensPerUSDT)}</div>
                      </div>
                    </div>

                    {/* Status Indicators */}
                    <div className="flex space-x-4">
                      <div className={`px-3 py-1 rounded-full text-sm ${
                        presaleActive ? 'bg-green-900/50 text-green-400' : 'bg-red-900/50 text-red-400'
                      }`}>
                        Presale: {presaleActive ? 'Active' : 'Inactive'}
                      </div>
                      <div className={`px-3 py-1 rounded-full text-sm ${
                        claimingActive ? 'bg-green-900/50 text-green-400' : 'bg-yellow-900/50 text-yellow-400'
                      }`}>
                        Claiming: {claimingActive ? 'Active' : 'Inactive'}
                      </div>
                    </div>

                    {/* Purchase Section */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* BNB Purchase */}
                      <div className="bg-yellow-900/20 rounded-lg p-6 border border-yellow-500/20">
                        <h3 className="text-yellow-400 font-semibold mb-4">Buy with BNB</h3>
                        <div className="space-y-4">
                          <input
                            type="number"
                            placeholder="Amount in BNB"
                            value={bnbAmount}
                            onChange={(e) => setBnbAmount(e.target.value)}
                            className="w-full px-4 py-3 bg-black/40 border border-yellow-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-yellow-500"
                          />
                          {bnbAmount && (
                            <div className="text-yellow-400 text-sm">
                              You will receive: ~{formatNumber(parseFloat(bnbAmount) * parseFloat(tokensPerBNB))} SOUL
                            </div>
                          )}
                          <button
                            onClick={buyWithBNB}
                            disabled={loading || !presaleActive}
                            className="w-full px-6 py-3 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                          >
                            {loading ? 'Processing...' : 'Buy with BNB'}
                          </button>
                        </div>
                      </div>

                      {/* USDT Purchase */}
                      <div className="bg-green-900/20 rounded-lg p-6 border border-green-500/20">
                        <h3 className="text-green-400 font-semibold mb-4">Buy with USDT</h3>
                        <div className="space-y-4">
                          <input
                            type="number"
                            placeholder="Amount in USDT"
                            value={usdtAmount}
                            onChange={(e) => setUsdtAmount(e.target.value)}
                            className="w-full px-4 py-3 bg-black/40 border border-green-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                          />
                          {usdtAmount && (
                            <div className="text-green-400 text-sm">
                              You will receive: ~{formatNumber(parseFloat(usdtAmount) * parseFloat(tokensPerUSDT))} SOUL
                            </div>
                          )}
                          <div className="text-green-400 text-sm">
                            USDT Allowance: {formatNumber(usdtAllowance)}
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={approveUSDT}
                              disabled={loading}
                              className="flex-1 px-4 py-3 bg-green-700 hover:bg-green-800 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                            >
                              Approve USDT
                            </button>
                            <button
                              onClick={buyWithUSDT}
                              disabled={loading || !presaleActive}
                              className="flex-1 px-4 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                            >
                              Buy with USDT
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Referral Code Input */}
                    <div className="bg-blue-900/20 rounded-lg p-6 border border-blue-500/20">
                      <h3 className="text-blue-400 font-semibold mb-4">Referral Code (Optional)</h3>
                      <input
                        type="text"
                        placeholder="Enter referral code"
                        value={referralCode}
                        onChange={(e) => setReferralCode(e.target.value)}
                        className="w-full px-4 py-3 bg-black/40 border border-blue-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                      />
                    </div>

                    {/* Claim Section */}
                    <div className="bg-purple-900/20 rounded-lg p-6 border border-purple-500/20">
                      <h3 className="text-purple-400 font-semibold mb-4">Your Purchases</h3>
                      <div className="space-y-4">
                        <div className="text-white">
                          Tokens Purchased: <span className="font-bold">{formatNumber(tokensPurchased)} SOUL</span>
                        </div>
                        <button
                          onClick={claimTokens}
                          disabled={loading || !claimingActive}
                          className="px-6 py-3 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                        >
                          {loading ? 'Processing...' : 'Claim Tokens'}
                        </button>
                      </div>
                    </div>
                  </div>
                )}

                {/* Staking Tab */}
                {activeTab === 'staking' && (
                  <div className="space-y-6">
                    {/* Staking Info */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div className="bg-green-900/30 rounded-lg p-4">
                        <div className="text-green-400 text-sm mb-2">Current APY</div>
                        <div className="text-white text-xl font-bold">{stakingAPY}%</div>
                      </div>
                      <div className="bg-blue-900/30 rounded-lg p-4">
                        <div className="text-blue-400 text-sm mb-2">Total Staked</div>
                        <div className="text-white text-xl font-bold">{formatNumber(totalStaked)}</div>
                      </div>
                      <div className={`rounded-lg p-4 ${
                        stakingActive ? 'bg-green-900/30' : 'bg-red-900/30'
                      }`}>
                        <div className={`text-sm mb-2 ${
                          stakingActive ? 'text-green-400' : 'text-red-400'
                        }`}>
                          Status
                        </div>
                        <div className="text-white text-xl font-bold">
                          {stakingActive ? 'Active' : 'Inactive'}
                        </div>
                      </div>
                    </div>

                    {/* User Staking Info */}
                    <div className="bg-purple-900/20 rounded-lg p-6 border border-purple-500/20">
                      <h3 className="text-purple-400 font-semibold mb-4">Your Staking</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <div className="text-gray-400 text-sm mb-2">Staked Balance</div>
                          <div className="text-white text-2xl font-bold">{formatNumber(stakedBalance)} SOUL</div>
                        </div>
                        <div>
                          <div className="text-gray-400 text-sm mb-2">Pending Rewards</div>
                          <div className="text-white text-2xl font-bold">{formatNumber(pendingRewards)} SOUL</div>
                        </div>
                      </div>
                      <div className="mt-4">
                        <div className="text-gray-400 text-sm mb-2">SOUL Allowance for Staking</div>
                        <div className="text-white font-bold">{formatNumber(soulAllowanceStaking)} SOUL</div>
                      </div>
                    </div>

                    {/* Staking Actions */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* Stake Section */}
                      <div className="bg-green-900/20 rounded-lg p-6 border border-green-500/20">
                        <h3 className="text-green-400 font-semibold mb-4">Stake SOUL</h3>
                        <div className="space-y-4">
                          <input
                            type="number"
                            placeholder="Amount to stake"
                            value={stakeAmount}
                            onChange={(e) => setStakeAmount(e.target.value)}
                            className="w-full px-4 py-3 bg-black/40 border border-green-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-green-500"
                          />
                          <div className="flex space-x-2">
                            <button
                              onClick={approveSoulStaking}
                              disabled={loading}
                              className="flex-1 px-4 py-3 bg-green-700 hover:bg-green-800 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                            >
                              Approve SOUL
                            </button>
                            <button
                              onClick={stakeTokens}
                              disabled={loading || !stakingActive}
                              className="flex-1 px-4 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                            >
                              Stake
                            </button>
                          </div>
                        </div>
                      </div>

                      {/* Unstake Section */}
                      <div className="bg-red-900/20 rounded-lg p-6 border border-red-500/20">
                        <h3 className="text-red-400 font-semibold mb-4">Unstake SOUL</h3>
                        <div className="space-y-4">
                          <input
                            type="number"
                            placeholder="Amount to unstake"
                            value={unstakeAmount}
                            onChange={(e) => setUnstakeAmount(e.target.value)}
                            className="w-full px-4 py-3 bg-black/40 border border-red-500/30 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-red-500"
                          />
                          <button
                            onClick={unstakeTokens}
                            disabled={loading || !stakingActive}
                            className="w-full px-6 py-3 bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                          >
                            Unstake
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Claim Rewards */}
                    <div className="bg-yellow-900/20 rounded-lg p-6 border border-yellow-500/20">
                      <h3 className="text-yellow-400 font-semibold mb-4">Claim Rewards</h3>
                      <button
                        onClick={claimStakingRewards}
                        disabled={loading || parseFloat(pendingRewards) <= 0}
                        className="px-6 py-3 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                      >
                        Claim {formatNumber(pendingRewards)} SOUL
                      </button>
                    </div>
                  </div>
                )}

                {/* Referral Tab */}
                {activeTab === 'referral' && (
                  <div className="space-y-6">
                    {/* Referral Stats */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="bg-purple-900/30 rounded-lg p-4">
                        <div className="text-purple-400 text-sm mb-2">Referral Rewards</div>
                        <div className="text-white text-xl font-bold">{formatNumber(referralRewards)} SOUL</div>
                      </div>
                      <div className="bg-blue-900/30 rounded-lg p-4">
                        <div className="text-blue-400 text-sm mb-2">Referrals Count</div>
                        <div className="text-white text-xl font-bold">{referralCount}</div>
                      </div>
                    </div>

                    {/* Generate Referral Code */}
                    {!userReferralCode && (
                      <div className="bg-green-900/20 rounded-lg p-6 border border-green-500/20">
                        <h3 className="text-green-400 font-semibold mb-4">Generate Referral Code</h3>
                        <button
                          onClick={generateReferralCode}
                          disabled={loading}
                          className="px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                        >
                          Generate Code
                        </button>
                      </div>
                    )}

                    {/* Referral Link */}
                    {userReferralCode && (
                      <div className="bg-blue-900/20 rounded-lg p-6 border border-blue-500/20">
                        <h3 className="text-blue-400 font-semibold mb-4">Your Referral Link</h3>
                        <div className="space-y-4">
                          <div className="bg-black/40 p-4 rounded-lg border">
                            <div className="text-gray-400 text-sm mb-2">Referral Code</div>
                            <div className="text-white font-mono">{userReferralCode}</div>
                          </div>
                          <div className="bg-black/40 p-4 rounded-lg border">
                            <div className="text-gray-400 text-sm mb-2">Referral Link</div>
                            <div className="text-white font-mono text-sm break-all">{referralLink}</div>
                          </div>
                          <button
                            onClick={copyReferralLink}
                            className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors"
                          >
                            Copy Link
                          </button>
                        </div>
                      </div>
                    )}

                    {/* Claim Referral Rewards */}
                    <div className="bg-yellow-900/20 rounded-lg p-6 border border-yellow-500/20">
                      <h3 className="text-yellow-400 font-semibold mb-4">Claim Referral Rewards</h3>
                      <button
                        onClick={claimReferralRewards}
                        disabled={loading || parseFloat(referralRewards) <= 0}
                        className="px-6 py-3 bg-yellow-600 hover:bg-yellow-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                      >
                        Claim {formatNumber(referralRewards)} SOUL
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </>
        )}

        {/* Connect Wallet Prompt */}
        {!connected && (
          <div className="text-center py-16">
            <div className="max-w-md mx-auto">
              <div className="w-24 h-24 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-6">
                <span className="text-white font-bold text-3xl">S</span>
              </div>
              <h2 className="text-3xl font-bold text-white mb-4">Welcome to SOUL DApp</h2>
              <p className="text-gray-400 mb-8">
                Connect your wallet to participate in the token presale, staking, and referral system.
              </p>
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => connectWallet('metamask')}
                  disabled={loading}
                  className="px-6 py-3 bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                >
                  Connect MetaMask
                </button>
                <button
                  onClick={() => connectWallet('trustwallet')}
                  disabled={loading}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
                >
                  Connect Trust Wallet
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="bg-black/20 backdrop-blur-sm border-t border-purple-500/20 mt-16">
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="text-center text-gray-400">
            <p>&copy; 2024 SOUL DApp. Built on Binance Smart Chain.</p>
            <p className="text-sm mt-2">Always verify contract addresses before interacting.</p>
          </div>
        </div>
      </footer>

      {/* Loading Overlay */}
      {loading && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-purple-900/90 rounded-lg p-8 flex items-center space-x-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
            <span className="text-white font-medium">Processing...</span>
          </div>
        </div>
      )}
    </div>
  </div>
  );
}

export default App;
